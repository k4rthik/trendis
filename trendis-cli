#!/usr/bin/env python
import argparse
import time
from trendis import Trendis

"""
trendis-cli
Simple client to checkout the data that was already inserted
trendis-cli --help should be pretty helpful

"""
if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description='Simple client to view the trends, compute periodically, delete namespace etc',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-n', '--namespace', default="twitter",
            help='namespace for which the trends should be computed')
    parser.add_argument('-r', '--repeat', type=int,
            help='Keep computing trends every r seconds')
    parser.add_argument('-rh', '--host', default='localhost',
            help='redis host to connect to')
    parser.add_argument('-p', '--port', default=6379,
            help='redis port to connect to')
    parser.add_argument('--get', action='store_true', default=False,
            help='Do not compute, just get the latest computed top n trends for the namespace')
    parser.add_argument('-c', '--count', type=int, default=10,
            help='Show top <count> trends')
    parser.add_argument('-d', '--delete', action='store_true', default=False,
            help='delete the namespace')

    options = parser.parse_args()
    trendis = Trendis(namespace=options.namespace, host=options.host, port=options.port)
    if options.get:
         print trendis.get_trends(options.count)
    elif options.delete:
         confirm = raw_input("The namespace " + options.namespace + " will be deleted, Are you sure? enter y or yes " )
         if confirm == 'y' or confirm == 'yes':
             trendis.clear_namespace()
         else:
             print "Not deleting the namespace"
    else:
        while True:
            start = time.time()
            trendis.compute_trends()
            print trendis.get_trends(options.count)
            time_taken = int(time.time() - start)
            print "Time taken:", time_taken
            if not options.repeat:
                break
            if time_taken < options.repeat:
                time.sleep(options.repeat - time_taken)
